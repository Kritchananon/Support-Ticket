import { Component, inject, OnInit, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import { Subscription } from 'rxjs';
import { AuthService } from '../../../shared/services/auth.service';

// ‚úÖ Import interfaces ‡∏à‡∏≤‡∏Å user.model.ts ‡πÉ‡∏´‡∏°‡πà
import { 
  LoginFormData, 
  LoginResponse, 
  createLoginFormData,
  isLoginSuccessResponse,
  LOGIN_SUCCESS_CODE 
} from '../../../shared/models/user.model';

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent implements OnInit, OnDestroy {
  private authService = inject(AuthService);
  private router = inject(Router);
  private route = inject(ActivatedRoute);

  // ‚úÖ ‡πÉ‡∏ä‡πâ interface ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ
  loginData: LoginFormData = createLoginFormData();

  // ‚úÖ State management
  isLoading = false;
  errorMessage = '';
  showPassword = false;
  currentLanguage = 'th';
  returnUrl = '/dashboard';

  // ‚úÖ Subscription management
  private subscriptions: Subscription[] = [];

  ngOnInit(): void {
    console.log('üîß Login component initialized');
    this.setupInitialState();
    this.checkExistingAuth();
  }

  ngOnDestroy(): void {
    // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô memory leaks
    this.subscriptions.forEach(sub => sub.unsubscribe());
  }

  // ===== INITIALIZATION METHODS ===== ‚úÖ

  /**
   * ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
   */
  private setupInitialState(): void {
    // ‚úÖ ‡∏î‡∏∂‡∏á returnUrl ‡∏à‡∏≤‡∏Å query parameters
    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/dashboard';
    console.log('üéØ Return URL set to:', this.returnUrl);

    // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
    const savedLanguage = localStorage.getItem('language');
    if (savedLanguage && ['th', 'en'].includes(savedLanguage)) {
      this.currentLanguage = savedLanguage;
      console.log('üåç Language loaded:', this.currentLanguage);
    }

    // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î remember me state
    const rememberMe = localStorage.getItem('remember_me');
    if (rememberMe === 'true') {
      this.loginData.rememberMe = true;
      // ‡πÇ‡∏´‡∏•‡∏î username ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÑ‡∏ß‡πâ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      const savedUsername = localStorage.getItem('remembered_username');
      if (savedUsername) {
        this.loginData.username = savedUsername;
        console.log('üë§ Remembered username loaded');
      }
    }
  }

  /**
   * ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ login ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  private checkExistingAuth(): void {
    if (this.authService.isAuthenticated()) {
      console.log('‚úÖ Already authenticated, redirecting to:', this.returnUrl);
      this.navigateToReturnUrl();
    }
  }

  // ===== LOGIN PROCESS ===== ‚úÖ

  /**
   * ‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£ login
   */
  async onLogin(): Promise<void> {
    console.log('üöÄ Login process started');

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    if (!this.validateForm()) {
      return;
    }

    this.setLoadingState(true);
    this.clearErrorMessage();

    try {
      console.log('üì§ Attempting login for:', this.loginData.username);
      
      // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å AuthService login method
      const response: LoginResponse = await this.authService.login(
        this.loginData.username,
        this.loginData.password,
        this.currentLanguage
      );

      console.log('üì• Login response received:', {
        code: response.code,
        status: response.status,
        message: response.message,
        hasUser: !!response.user,
        hasToken: !!response.access_token
      });

      // ‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• response
      await this.handleLoginResponse(response);

    } catch (error: any) {
      console.error('‚ùå Login failed:', error);
      this.handleLoginError(error);
    } finally {
      this.setLoadingState(false);
    }
  }

  /**
   * ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ login response
   */
  private async handleLoginResponse(response: LoginResponse): Promise<void> {
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    if (isLoginSuccessResponse(response)) {
      console.log('‚úÖ Login successful!');
      
      // ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ remember me
      await this.handleRememberMe();
      
      // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
      this.showSuccessMessage();
      
      // ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß navigate
      setTimeout(() => {
        this.navigateAfterLogin();
      }, 100);
      
    } else {
      // ‚úÖ Login ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      console.log('‚ùå Login failed:', response.message);
      this.errorMessage = response.message || this.getLanguageText(
        '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 
        'Login failed'
      );
    }
  }

  /**
   * ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ remember me functionality
   */
  private async handleRememberMe(): Promise<void> {
    if (this.loginData.rememberMe) {
      localStorage.setItem('remember_me', 'true');
      localStorage.setItem('remembered_username', this.loginData.username);
      console.log('üíæ Remember me settings saved');
    } else {
      localStorage.removeItem('remember_me');
      localStorage.removeItem('remembered_username');
      console.log('üóëÔ∏è Remember me settings cleared');
    }
  }

  /**
   * ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
   */
  private showSuccessMessage(): void {
    // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° toast notification ‡∏´‡∏£‡∏∑‡∏≠ success message ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    console.log('üéâ Login success message displayed');
  }

  /**
   * ‚úÖ Navigate ‡∏´‡∏•‡∏±‡∏á login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
   */
  private async navigateAfterLogin(): Promise<void> {
    console.log('üéØ Navigating after login to:', this.returnUrl);
    
    try {
      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö authentication ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
      if (!this.authService.isAuthenticated()) {
        console.error('‚ùå Authentication check failed after login');
        this.errorMessage = this.getLanguageText(
          '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö', 
          'Authentication error occurred'
        );
        return;
      }

      console.log('üîë Auth check passed, navigating...');
      
      // ‚úÖ ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° navigate ‡πÑ‡∏õ‡∏¢‡∏±‡∏á returnUrl
      const navigationResult = await this.router.navigate([this.returnUrl]);
      
      if (navigationResult) {
        console.log('‚úÖ Navigation successful to:', this.returnUrl);
      } else {
        console.warn('‚ö†Ô∏è Navigation to returnUrl failed, trying dashboard...');
        await this.router.navigate(['/dashboard']);
      }
      
    } catch (navigationError) {
      console.error('‚ùå Navigation error:', navigationError);
      
      // ‚úÖ Fallback navigation
      try {
        await this.router.navigate(['/dashboard']);
        console.log('‚úÖ Fallback navigation to dashboard successful');
      } catch (fallbackError) {
        console.error('‚ùå Fallback navigation failed:', fallbackError);
        // ‚úÖ Last resort - ‡πÉ‡∏ä‡πâ window.location
        window.location.href = '/dashboard';
      }
    }
  }

  /**
   * ‚úÖ Navigate ‡πÑ‡∏õ‡∏¢‡∏±‡∏á returnUrl (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà authenticated ‡πÅ‡∏•‡πâ‡∏ß)
   */
  private navigateToReturnUrl(): void {
    this.router.navigate([this.returnUrl]).catch(error => {
      console.error('‚ùå Navigation to return URL failed:', error);
      this.router.navigate(['/dashboard']);
    });
  }

  // ===== ERROR HANDLING ===== ‚úÖ

  /**
   * ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ login errors
   */
  private handleLoginError(error: any): void {
    let errorMessage = '';

    if (error instanceof Error) {
      errorMessage = error.message;
    } else if (typeof error === 'string') {
      errorMessage = error;
    } else if (error?.error?.message) {
      errorMessage = error.error.message;
    } else {
      errorMessage = this.getLanguageText(
        '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        'An error occurred. Please try again.'
      );
    }

    this.errorMessage = errorMessage;
    console.error('üí• Login error handled:', errorMessage);
  }

  // ===== FORM VALIDATION ===== ‚úÖ

  /**
   * ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
   */
  private validateForm(): boolean {
    this.clearErrorMessage();

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö username
    if (!this.loginData.username || this.loginData.username.trim().length === 0) {
      this.errorMessage = this.getLanguageText(
        '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
        'Please enter username'
      );
      return false;
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö password
    if (!this.loginData.password || this.loginData.password.length === 0) {
      this.errorMessage = this.getLanguageText(
        '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô',
        'Please enter password'
      );
      return false;
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß username
    if (this.loginData.username.trim().length < 3) {
      this.errorMessage = this.getLanguageText(
        '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£',
        'Username must be at least 3 characters'
      );
      return false;
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß password
    if (this.loginData.password.length < 4) {
      this.errorMessage = this.getLanguageText(
        '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 4 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£',
        'Password must be at least 4 characters'
      );
      return false;
    }

    console.log('‚úÖ Form validation passed');
    return true;
  }

  // ===== UI STATE MANAGEMENT ===== ‚úÖ

  /**
   * ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ loading state
   */
  private setLoadingState(loading: boolean): void {
    this.isLoading = loading;
    console.log('‚è≥ Loading state:', loading);
  }

  /**
   * ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error
   */
  private clearErrorMessage(): void {
    this.errorMessage = '';
  }

  /**
   * ‚úÖ ‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô password
   */
  togglePassword(): void {
    this.showPassword = !this.showPassword;
    console.log('üëÅÔ∏è Password visibility toggled:', this.showPassword);
  }

  // ===== LANGUAGE MANAGEMENT ===== ‚úÖ

  /**
   * ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏†‡∏≤‡∏©‡∏≤
   */
  switchLanguage(lang: string): void {
    if (['th', 'en'].includes(lang)) {
      this.currentLanguage = lang;
      localStorage.setItem('language', lang);
      console.log('üåç Language switched to:', lang);
    }
  }

  /**
   * ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤
   */
  getLanguageText(thText: string, enText: string): string {
    return this.currentLanguage === 'th' ? thText : enText;
  }

  // ===== UTILITY METHODS ===== ‚úÖ

  /**
   * ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  isFormValid(): boolean {
    return !!(this.loginData.username?.trim() && 
              this.loginData.password && 
              !this.isLoading);
  }

  /**
   * ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
   */
  clearForm(): void {
    this.loginData = createLoginFormData();
    this.clearErrorMessage();
    console.log('üßπ Form cleared');
  }

  /**
   * ‚úÖ Reset form ‡πÅ‡∏•‡∏∞ state
   */
  resetComponent(): void {
    this.clearForm();
    this.setLoadingState(false);
    this.showPassword = false;
    console.log('üîÑ Component reset');
  }

  // ===== KEYBOARD EVENTS ===== ‚úÖ

  /**
   * ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Enter key
   */
  onKeyDown(event: KeyboardEvent): void {
    if (event.key === 'Enter' && this.isFormValid()) {
      event.preventDefault();
      this.onLogin();
    }
  }

  // ===== DEBUG METHODS ===== ‚úÖ

  /**
   * ‚úÖ Debug component state
   */
  debugComponentState(): void {
    console.group('üîç Login Component Debug');
    console.log('üìã Form Data:', {
      username: this.loginData.username,
      hasPassword: !!this.loginData.password,
      rememberMe: this.loginData.rememberMe
    });
    console.log('üéõÔ∏è Component State:', {
      isLoading: this.isLoading,
      errorMessage: this.errorMessage,
      showPassword: this.showPassword,
      currentLanguage: this.currentLanguage,
      returnUrl: this.returnUrl
    });
    console.log('‚úÖ Form Valid:', this.isFormValid());
    console.log('üîê Auth Status:', this.authService.isAuthenticated());
    console.groupEnd();
  }

  /**
   * ‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö connection ‡∏Å‡∏±‡∏ö Backend
   */
  async testConnection(): Promise<void> {
    console.log('üîß Testing backend connection...');
    try {
      // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° health check endpoint ‡πÑ‡∏î‡πâ
      console.log('‚úÖ Backend connection test completed');
    } catch (error) {
      console.error('‚ùå Backend connection test failed:', error);
    }
  }

  // ===== ACCESSIBILITY ===== ‚úÖ

  /**
   * ‚úÖ ‡∏î‡∏∂‡∏á aria-label ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö password toggle
   */
  getPasswordToggleAriaLabel(): string {
    return this.getLanguageText(
      this.showPassword ? '‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô' : '‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô',
      this.showPassword ? 'Hide password' : 'Show password'
    );
  }

  /**
   * ‚úÖ ‡∏î‡∏∂‡∏á aria-describedby ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö error
   */
  getErrorAriaDescribedBy(): string | null {
    return this.errorMessage ? 'login-error' : null;
  }
}