import { Component, inject, OnInit, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router, NavigationEnd } from '@angular/router';
import { Subscription } from 'rxjs';
import { filter } from 'rxjs/operators';
import { AuthService } from '../../services/auth.service';

// ‚úÖ Import interfaces ‡∏à‡∏≤‡∏Å user.model.ts ‡πÉ‡∏´‡∏°‡πà
import { User, AuthState } from '../../models/user.model';

@Component({
  selector: 'app-header',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './header.component.html',
  styleUrls: ['./header.component.css']
})
export class HeaderComponent implements OnInit, OnDestroy {
  private authService = inject(AuthService);
  private router = inject(Router);

  // ‚úÖ User and Auth State
  currentUser: User | null = null;
  authState: AuthState | null = null;
  userPermissions: string[] = [];
  
  // ‚úÖ UI State
  currentLanguage = 'th';
  pageTitle = 'Dashboard';
  isLoading = false;

  // ‚úÖ Token Warning Properties
  showTokenWarning = false;
  isRefreshing = false;
  tokenInfo: any = null;

  // ‚úÖ Subscription Management
  private subscriptions: Subscription[] = [];

  ngOnInit(): void {
    console.log('üîß Header component initialized');
    this.initializeComponent();
    this.setupSubscriptions();
    this.updatePageTitle();
  }

  ngOnDestroy(): void {
    console.log('üßπ Header component cleanup');
    // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô memory leaks
    this.subscriptions.forEach(sub => sub.unsubscribe());
  }

  // ===== INITIALIZATION ===== ‚úÖ

  /**
   * ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô component
   */
  private initializeComponent(): void {
    // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÅ‡∏•‡∏∞ auth state
    this.loadUserData();
    this.loadLanguagePreference();
    this.loadTokenInfo();
    
    console.log('üìã Header initialized with:', {
      hasUser: !!this.currentUser,
      language: this.currentLanguage,
      permissionCount: this.userPermissions.length
    });
  }

  /**
   * ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ subscriptions
   */
  private setupSubscriptions(): void {
    // ‚úÖ Subscribe to user changes
    const userSub = this.authService.currentUser$.subscribe(user => {
      console.log('üë§ User data updated in header:', user?.username);
      this.currentUser = user;
      this.updateUserRelatedData();
    });

    // ‚úÖ Subscribe to auth state changes
    const authSub = this.authService.authState$.subscribe(state => {
      console.log('üîê Auth state updated in header:', {
        isAuthenticated: state.isAuthenticated,
        hasUser: !!state.user
      });
      this.authState = state;
      this.userPermissions = state.permissions || [];
    });

    // ‚úÖ Subscribe to token warning
    const warningSub = this.authService.getWarningStatus().subscribe(warning => {
      console.log('‚ö†Ô∏è Token warning status:', warning);
      this.showTokenWarning = warning;
      if (warning) {
        this.updateTokenInfo();
      }
    });

    // ‚úÖ Subscribe to route changes for page title
    const routeSub = this.router.events
      .pipe(filter(event => event instanceof NavigationEnd))
      .subscribe((event: NavigationEnd) => {
        console.log('üõ£Ô∏è Route changed:', event.url);
        this.updatePageTitle();
      });

    // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö subscriptions ‡πÄ‡∏û‡∏∑‡πà‡∏≠ cleanup
    this.subscriptions.push(userSub, authSub, warningSub, routeSub);
  }

  // ===== DATA LOADING ===== ‚úÖ

  /**
   * ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user
   */
  private loadUserData(): void {
    this.currentUser = this.authService.getCurrentUser();
    this.userPermissions = this.authService.getUserPermissions();
    
    if (this.currentUser) {
      console.log('‚úÖ User data loaded:', {
        id: this.currentUser.id,
        username: this.currentUser.username,
        fullName: this.getUserFullName()
      });
    }
  }

  /**
   * ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏©‡∏≤
   */
  private loadLanguagePreference(): void {
    const savedLanguage = localStorage.getItem('language');
    if (savedLanguage && ['th', 'en'].includes(savedLanguage)) {
      this.currentLanguage = savedLanguage;
      console.log('üåç Language preference loaded:', this.currentLanguage);
    }
  }

  /**
   * ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• token
   */
  private loadTokenInfo(): void {
    this.tokenInfo = this.authService.getTokenInfo();
    if (this.tokenInfo) {
      console.log('üîë Token info loaded:', {
        username: this.tokenInfo.username,
        expiresAt: this.tokenInfo.expires_at,
        timeLeftMinutes: this.tokenInfo.time_left_minutes
      });
    }
  }

  /**
   * ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö user
   */
  private updateUserRelatedData(): void {
    if (this.currentUser) {
      this.userPermissions = this.authService.getUserPermissions();
      this.updateTokenInfo();
    }
  }

  /**
   * ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• token
   */
  private updateTokenInfo(): void {
    this.tokenInfo = this.authService.getTokenInfo();
  }

  // ===== USER INFO METHODS ===== ‚úÖ

  /**
   * ‚úÖ ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏≠‡∏á user
   */
  getUserFullName(): string {
    if (!this.currentUser) return '';
    
    const firstName = this.currentUser.firstname || '';
    const lastName = this.currentUser.lastname || '';
    
    if (firstName || lastName) {
      return `${firstName} ${lastName}`.trim();
    }
    
    return this.currentUser.username || 'User';
  }

  /**
   * ‚úÖ ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏Ç‡∏≠‡∏á user
   */
  getUserInitials(): string {
    if (!this.currentUser) return 'U';
    
    const firstName = this.currentUser.firstname || '';
    const lastName = this.currentUser.lastname || '';
    
    if (firstName && lastName) {
      return `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase();
    }
    
    const username = this.currentUser.username || 'User';
    return username.charAt(0).toUpperCase();
  }

  /**
   * ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• contact
   */
  getUserContact(): string {
    if (!this.currentUser) return '';
    return this.currentUser.email || this.currentUser.phone || '';
  }

  /**
   * ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
   */
  hasPermission(permission: string): boolean {
    return this.authService.hasPermission(permission);
  }

  /**
   * ‚úÖ ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô permissions
   */
  getPermissionCount(): number {
    return this.userPermissions.length;
  }

  // ===== GREETING METHODS ===== ‚úÖ

  /**
   * ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
   */
  getGreeting(): string {
    const hour = new Date().getHours();
    
    if (this.currentLanguage === 'th') {
      if (hour < 6) return '‡∏£‡∏≤‡∏ï‡∏£‡∏µ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡πå';
      if (hour < 12) return '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤';
      if (hour < 17) return '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡∏ö‡πà‡∏≤‡∏¢';
      if (hour < 20) return '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô';
      return '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡∏Ñ‡πà‡∏≥';
    } else {
      if (hour < 6) return 'Good night';
      if (hour < 12) return 'Good morning';
      if (hour < 17) return 'Good afternoon';
      if (hour < 20) return 'Good evening';
      return 'Good night';
    }
  }

  /**
   * ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤
   */
  getText(en: string, th: string): string {
    return this.currentLanguage === 'th' ? th : en;
  }

  // ===== LANGUAGE MANAGEMENT ===== ‚úÖ

  /**
   * ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏†‡∏≤‡∏©‡∏≤
   */
  switchLanguage(lang: string): void {
    if (['th', 'en'].includes(lang) && lang !== this.currentLanguage) {
      console.log('üåç Switching language from', this.currentLanguage, 'to', lang);
      
      this.currentLanguage = lang;
      localStorage.setItem('language', lang);
      this.updatePageTitle();
      
      // ‚úÖ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ emit event ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏à‡πâ‡∏á component ‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ
      this.broadcastLanguageChange(lang);
    }
  }

  /**
   * ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á component ‡∏≠‡∏∑‡πà‡∏ô
   */
  private broadcastLanguageChange(language: string): void {
    const event = new CustomEvent('language-changed', {
      detail: { language }
    });
    window.dispatchEvent(event);
  }

  // ===== PAGE TITLE MANAGEMENT ===== ‚úÖ

  /**
   * ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï page title ‡∏ï‡∏≤‡∏° route
   */
  private updatePageTitle(): void {
    const path = this.router.url;
    
    console.log('üìÑ Updating page title for path:', path);
    
    if (path.includes('/dashboard')) {
      this.pageTitle = this.getText('Dashboard', '‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î');
    } else if (path.includes('/tickets/new') || path.includes('/tickets/create')) {
      this.pageTitle = this.getText('Create New Ticket', '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡πã‡∏ß‡πÉ‡∏´‡∏°‡πà');
    } else if (path.includes('/tickets/') && path.includes('/edit')) {
      this.pageTitle = this.getText('Edit Ticket', '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏±‡πã‡∏ß');
    } else if (path.includes('/tickets/') && !path.includes('/edit')) {
      this.pageTitle = this.getText('Ticket Details', '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡∏±‡πã‡∏ß');
    } else if (path.includes('/tickets')) {
      this.pageTitle = this.getText('All Tickets', '‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
    } else if (path.includes('/settings')) {
      this.pageTitle = this.getText('Settings', '‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤');
    } else if (path.includes('/reports')) {
      this.pageTitle = this.getText('Reports', '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô');
    } else {
      this.pageTitle = this.getText('Support Ticket System', '‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏±‡πã‡∏ß‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô');
    }
  }

  // ===== NAVIGATION METHODS ===== ‚úÖ

  /**
   * ‚úÖ ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ profile
   */
  goToProfile(event: Event): void {
    event.preventDefault();
    console.log('üë§ Navigating to profile');
    this.router.navigate(['/profile']);
  }

  /**
   * ‚úÖ ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ settings
   */
  goToSettings(event: Event): void {
    event.preventDefault();
    console.log('‚öôÔ∏è Navigating to settings');
    this.router.navigate(['/settings/general']);
  }

  /**
   * ‚úÖ ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ dashboard
   */
  goToDashboard(): void {
    console.log('üè† Navigating to dashboard');
    this.router.navigate(['/dashboard']);
  }

  // ===== LOGOUT FUNCTIONALITY ===== ‚úÖ

  /**
   * ‚úÖ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
   */
  logout(event: Event): void {
    event.preventDefault();
    
    console.log('üö™ Logout requested');
    
    // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á confirmation dialog
    const confirmLogout = confirm(
      this.getText(
        'Are you sure you want to logout?', 
        '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?'
      )
    );
    
    if (confirmLogout) {
      console.log('‚úÖ Logout confirmed, proceeding...');
      this.performLogout();
    } else {
      console.log('‚ùå Logout cancelled by user');
    }
  }

  /**
   * ‚úÖ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ logout
   */
  private performLogout(): void {
    this.isLoading = true;
    
    try {
      // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å AuthService logout
      this.authService.logout();
      console.log('‚úÖ Logout completed');
    } catch (error) {
      console.error('‚ùå Logout error:', error);
      // ‚úÖ ‡πÅ‡∏°‡πâ‡∏à‡∏∞ error ‡∏Å‡πá force logout
      this.authService.clearAuthData();
    } finally {
      this.isLoading = false;
    }
  }

  // ===== TOKEN WARNING METHODS ===== ‚úÖ

  /**
   * ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä session ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á
   */
  refreshSession(): void {
    console.log('üîÑ Manual session refresh requested');
    
    this.isRefreshing = true;
    
    this.authService.manualRefresh().subscribe({
      next: (tokenData) => {
        console.log('‚úÖ Manual token refresh successful:', tokenData);
        this.showTokenWarning = false;
        this.isRefreshing = false;
        this.updateTokenInfo();
      },
      error: (error) => {
        console.error('‚ùå Manual token refresh failed:', error);
        this.isRefreshing = false;
        // AuthService ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ auto logout
      }
    });
  }

  /**
   * ‚úÖ ‡∏õ‡∏¥‡∏î token warning
   */
  dismissWarning(): void {
    console.log('‚ùå Token warning dismissed');
    this.showTokenWarning = false;
  }

  /**
   * ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
   */
  getTimeLeftText(): string {
    if (!this.tokenInfo) return '';
    
    const minutes = this.tokenInfo.time_left_minutes;
    if (minutes <= 0) {
      return this.getText('Session expired', '‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß');
    }
    
    const timeText = minutes === 1 ? 
      this.getText('1 minute', '1 ‡∏ô‡∏≤‡∏ó‡∏µ') : 
      this.getText(`${minutes} minutes`, `${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`);
    
    return this.getText(
      `Session expires in ${timeText}`,
      `‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô ${timeText}`
    );
  }

  // ===== MOBILE MENU ===== ‚úÖ

  /**
   * ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î mobile menu
   */
  toggleMobileMenu(): void {
    console.log('üì± Mobile menu toggled');
    
    const sidebar = document.querySelector('.sidebar');
    const overlay = document.querySelector('.mobile-overlay');
    const body = document.body;
    
    if (sidebar && overlay) {
      const isOpen = sidebar.classList.contains('show');
      
      if (isOpen) {
        sidebar.classList.remove('show');
        overlay.classList.remove('show');
        body.classList.remove('mobile-menu-open');
      } else {
        sidebar.classList.add('show');
        overlay.classList.add('show');
        body.classList.add('mobile-menu-open');
      }
    }
  }

  // ===== UTILITY METHODS ===== ‚úÖ

  /**
   * ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô mobile ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  isMobile(): boolean {
    return window.innerWidth < 768;
  }

  /**
   * ‚úÖ ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ online/offline
   */
  isOnline(): boolean {
    return navigator.onLine;
  }

  /**
   * ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• browser info
   */
  getBrowserInfo(): string {
    return navigator.userAgent;
  }

  // ===== DEBUG METHODS ===== ‚úÖ

  /**
   * ‚úÖ Debug header component state
   */
  debugHeaderState(): void {
    console.group('üîç Header Component Debug');
    
    console.log('üë§ User Info:', {
      hasUser: !!this.currentUser,
      username: this.currentUser?.username,
      fullName: this.getUserFullName(),
      initials: this.getUserInitials(),
      contact: this.getUserContact()
    });
    
    console.log('üîê Auth Info:', {
      isAuthenticated: this.authService.isAuthenticated(),
      permissionCount: this.userPermissions.length,
      permissions: this.userPermissions
    });
    
    console.log('üéõÔ∏è Component State:', {
      currentLanguage: this.currentLanguage,
      pageTitle: this.pageTitle,
      showTokenWarning: this.showTokenWarning,
      isRefreshing: this.isRefreshing,
      isLoading: this.isLoading
    });
    
    if (this.tokenInfo) {
      console.log('üîë Token Info:', this.tokenInfo);
    }
    
    console.groupEnd();
  }

  /**
   * ‚úÖ Force refresh component data
   */
  forceRefresh(): void {
    console.log('üîÑ Force refreshing header component');
    this.loadUserData();
    this.updateTokenInfo();
    this.updatePageTitle();
  }

  /**
   * ‚úÖ Test authentication status
   */
  testAuthStatus(): void {
    console.log('üß™ Testing authentication status');
    this.authService.debugAuthStatus();
  }
}