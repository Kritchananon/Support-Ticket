import { Directive, Input, TemplateRef, ViewContainerRef, OnInit, OnDestroy, inject } from '@angular/core';
import { Subject, takeUntil } from 'rxjs';
import { AuthService } from '../services/auth.service';
import { 
  permissionEnum, 
  UserRole, 
  enumToNumber,
  isValidPermissionNumber,
  ROLES 
} from '../models/permission.model';

/**
 * ‚úÖ ENHANCED: Directive ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö permissions ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô elements
 * ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á number ‡πÅ‡∏•‡∏∞ permissionEnum (19 permissions)
 * 
 * Usage:
 * <div *hasPermission="[1, 2]">Create Button</div>
 * <div *hasPermission="[permissionEnum.EDIT_TICKET, permissionEnum.DELETE_TICKET]" [requireAll]="true">Admin Actions</div>
 * <div *hasRole="['admin', 'supporter']">Support Menu</div>
 * <div *hasRole="['admin']" *hasPermission="[15]">User Management</div>
 */

// ===== ‚úÖ ENHANCED: Permission Directive =====
@Directive({
  selector: '[hasPermission]',
  standalone: true
})
export class HasPermissionDirective implements OnInit, OnDestroy {
  private authService = inject(AuthService);
  private templateRef = inject(TemplateRef<any>);
  private viewContainer = inject(ViewContainerRef);
  private destroy$ = new Subject<void>();

  private _permissions: number[] = [];
  private _requireAll = false;
  private _isVisible = false;

  /**
   * ‚úÖ ENHANCED: ‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á number[], permissionEnum[], ‡∏´‡∏£‡∏∑‡∏≠ mixed array
   * ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö requireAll mode ‡∏î‡πâ‡∏ß‡∏¢
   */
  @Input() set hasPermission(permissions: number | permissionEnum | (number | permissionEnum)[] | {
    permissions: (number | permissionEnum)[];
    requireAll?: boolean;
  }) {
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô object ‡∏ó‡∏µ‡πà‡∏°‡∏µ permissions ‡πÅ‡∏•‡∏∞ requireAll
    if (typeof permissions === 'object' && !Array.isArray(permissions) && 'permissions' in permissions) {
      const config = permissions as { permissions: (number | permissionEnum)[]; requireAll?: boolean };
      this._requireAll = config.requireAll || false;
      
      this._permissions = config.permissions.map(p => {
        if (typeof p === 'number') {
          return p;
        } else {
          return enumToNumber(p as permissionEnum);
        }
      }).filter(p => isValidPermissionNumber(p));
    }
    // Handle single number
    else if (typeof permissions === 'number') {
      this._permissions = [permissions];
    } 
    // Handle array
    else if (Array.isArray(permissions)) {
      this._permissions = permissions.map(p => {
        if (typeof p === 'number') {
          return p;
        } else {
          return enumToNumber(p as permissionEnum);
        }
      }).filter(p => isValidPermissionNumber(p));
    } 
    // Handle single enum
    else {
      try {
        const permissionNumber = enumToNumber(permissions as permissionEnum);
        this._permissions = [permissionNumber];
      } catch (error) {
        console.warn('‚ö† Invalid permissions provided to hasPermission directive:', permissions);
        this._permissions = [];
      }
    }

    console.log('üîç HasPermission directive updated:', {
      original: permissions,
      processed: this._permissions,
      requireAll: this._requireAll
    });

    this.updateVisibility();
  }

  @Input() set requireAll(value: boolean) {
    this._requireAll = value;
    this.updateVisibility();
  }

  ngOnInit(): void {
    console.log('üîß HasPermission directive initialized');
    
    // ‚úÖ Subscribe to auth state changes
    this.authService.authState$
      .pipe(takeUntil(this.destroy$))
      .subscribe(() => {
        console.log('üîÑ Auth state changed, updating permission visibility');
        this.updateVisibility();
      });

    // ‚úÖ Initial visibility check
    this.updateVisibility();
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  private updateVisibility(): void {
    const hasRequiredPermissions = this.checkPermissions();
    
    console.log('üîç Permission check result:', {
      permissions: this._permissions,
      requireAll: this._requireAll,
      hasPermissions: hasRequiredPermissions,
      currentVisibility: this._isVisible
    });
    
    if (hasRequiredPermissions && !this._isVisible) {
      // ‡πÅ‡∏™‡∏î‡∏á element
      this.viewContainer.createEmbeddedView(this.templateRef);
      this._isVisible = true;
      console.log('‚úÖ Element shown by permission directive');
    } else if (!hasRequiredPermissions && this._isVisible) {
      // ‡∏ã‡πà‡∏≠‡∏ô element
      this.viewContainer.clear();
      this._isVisible = false;
      console.log('‚ö† Element hidden by permission directive');
    }
  }

  private checkPermissions(): boolean {
    if (!this._permissions.length) {
      console.log('üìã No permissions required, allowing access');
      return true; // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç = ‡πÅ‡∏™‡∏î‡∏á
    }

    if (!this.authService.isAuthenticated()) {
      console.log('üö´ User not authenticated, denying access');
      return false;
    }

    const userPermissions = this.authService.getEffectivePermissions();
    
    console.log('üîç Checking permissions:', {
      required: this._permissions,
      user: userPermissions,
      requireAll: this._requireAll
    });
    
    if (this._requireAll) {
      // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ó‡∏∏‡∏Å permission
      const hasAll = this._permissions.every(permission => 
        userPermissions.includes(permission)
      );
      console.log('üéØ Require ALL permissions:', hasAll);
      return hasAll;
    } else {
      // ‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 permission
      const hasAny = this._permissions.some(permission => 
        userPermissions.includes(permission)
      );
      console.log('üéØ Require ANY permission:', hasAny);
      return hasAny;
    }
  }
}

// ===== ‚úÖ ENHANCED: Role Directive =====
@Directive({
  selector: '[hasRole]',
  standalone: true
})
export class HasRoleDirective implements OnInit, OnDestroy {
  private authService = inject(AuthService);
  private templateRef = inject(TemplateRef<any>);
  private viewContainer = inject(ViewContainerRef);
  private destroy$ = new Subject<void>();

  private _roles: UserRole[] = [];
  private _requireAll = false;
  private _isVisible = false;

  /**
   * ‚úÖ ENHANCED: ‡∏£‡∏±‡∏ö single role ‡∏´‡∏£‡∏∑‡∏≠ array of roles ‡∏û‡∏£‡πâ‡∏≠‡∏° validation
   */
  @Input() set hasRole(roles: UserRole | UserRole[]) {
    if (typeof roles === 'string') {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô valid role
      if (Object.values(ROLES).includes(roles as UserRole)) {
        this._roles = [roles as UserRole];
      } else {
        console.warn('‚ö† Invalid role provided to hasRole directive:', roles);
        this._roles = [];
      }
    } else if (Array.isArray(roles)) {
      // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ valid roles
      this._roles = roles.filter(role => Object.values(ROLES).includes(role));
      
      if (this._roles.length !== roles.length) {
        const invalidRoles = roles.filter(role => !Object.values(ROLES).includes(role));
        console.warn('‚ö† Some invalid roles filtered out:', invalidRoles);
      }
    } else {
      console.warn('‚ö† Invalid roles provided to hasRole directive:', roles);
      this._roles = [];
    }

    console.log('üë• HasRole directive updated:', {
      original: roles,
      processed: this._roles
    });

    this.updateVisibility();
  }

  @Input() set requireAll(value: boolean) {
    this._requireAll = value;
    this.updateVisibility();
  }

  ngOnInit(): void {
    console.log('üîß HasRole directive initialized');
    
    // ‚úÖ Subscribe to auth state changes
    this.authService.authState$
      .pipe(takeUntil(this.destroy$))
      .subscribe(() => {
        console.log('üîÑ Auth state changed, updating role visibility');
        this.updateVisibility();
      });

    // ‚úÖ Initial visibility check
    this.updateVisibility();
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  private updateVisibility(): void {
    const hasRequiredRoles = this.checkRoles();
    
    console.log('üîç Role check result:', {
      roles: this._roles,
      requireAll: this._requireAll,
      hasRoles: hasRequiredRoles,
      currentVisibility: this._isVisible
    });
    
    if (hasRequiredRoles && !this._isVisible) {
      // ‡πÅ‡∏™‡∏î‡∏á element
      this.viewContainer.createEmbeddedView(this.templateRef);
      this._isVisible = true;
      console.log('‚úÖ Element shown by role directive');
    } else if (!hasRequiredRoles && this._isVisible) {
      // ‡∏ã‡πà‡∏≠‡∏ô element
      this.viewContainer.clear();
      this._isVisible = false;
      console.log('‚ö† Element hidden by role directive');
    }
  }

  private checkRoles(): boolean {
    if (!this._roles.length) {
      console.log('üìã No roles required, allowing access');
      return true; // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç = ‡πÅ‡∏™‡∏î‡∏á
    }

    if (!this.authService.isAuthenticated()) {
      console.log('üö´ User not authenticated, denying access');
      return false;
    }

    const userRoles = this.authService.getUserRoles();
    
    console.log('üîç Checking roles:', {
      required: this._roles,
      user: userRoles,
      requireAll: this._requireAll
    });
    
    if (this._requireAll) {
      // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ó‡∏∏‡∏Å role
      const hasAll = this._roles.every(role => userRoles.includes(role));
      console.log('üéØ Require ALL roles:', hasAll);
      return hasAll;
    } else {
      // ‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 role
      const hasAny = this._roles.some(role => userRoles.includes(role));
      console.log('üéØ Require ANY role:', hasAny);
      return hasAny;
    }
  }
}

// ===== ‚úÖ ENHANCED: Combined Permission & Role Directive =====
@Directive({
  selector: '[hasAccess]',
  standalone: true
})
export class HasAccessDirective implements OnInit, OnDestroy {
  private authService = inject(AuthService);
  private templateRef = inject(TemplateRef<any>);
  private viewContainer = inject(ViewContainerRef);
  private destroy$ = new Subject<void>();

  private _permissions: number[] = [];
  private _roles: UserRole[] = [];
  private _requireAllPermissions = false;
  private _requireAllRoles = false;
  private _isVisible = false;

  /**
   * ‚úÖ ENHANCED: ‡∏£‡∏±‡∏ö config object ‡∏û‡∏£‡πâ‡∏≠‡∏° validation
   */
  @Input() set hasAccess(config: {
    permissions?: (number | permissionEnum)[];
    roles?: UserRole[];
    requireAllPermissions?: boolean;
    requireAllRoles?: boolean;
  }) {
    // Process permissions
    if (config.permissions) {
      this._permissions = config.permissions.map(p => 
        typeof p === 'number' ? p : enumToNumber(p as permissionEnum)
      ).filter(p => isValidPermissionNumber(p));
    } else {
      this._permissions = [];
    }

    // Process roles
    if (config.roles) {
      this._roles = config.roles.filter(role => Object.values(ROLES).includes(role));
    } else {
      this._roles = [];
    }

    this._requireAllPermissions = config.requireAllPermissions || false;
    this._requireAllRoles = config.requireAllRoles || false;

    console.log('üîçüë• HasAccess directive updated:', {
      permissions: this._permissions,
      roles: this._roles,
      requireAllPermissions: this._requireAllPermissions,
      requireAllRoles: this._requireAllRoles
    });

    this.updateVisibility();
  }

  ngOnInit(): void {
    console.log('üîß HasAccess directive initialized');
    
    // ‚úÖ Subscribe to auth state changes
    this.authService.authState$
      .pipe(takeUntil(this.destroy$))
      .subscribe(() => {
        console.log('üîÑ Auth state changed, updating access visibility');
        this.updateVisibility();
      });

    // ‚úÖ Initial visibility check
    this.updateVisibility();
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  private updateVisibility(): void {
    const hasAccess = this.checkAccess();
    
    console.log('üîç Access check result:', {
      permissions: this._permissions,
      roles: this._roles,
      hasAccess: hasAccess,
      currentVisibility: this._isVisible
    });
    
    if (hasAccess && !this._isVisible) {
      // ‡πÅ‡∏™‡∏î‡∏á element
      this.viewContainer.createEmbeddedView(this.templateRef);
      this._isVisible = true;
      console.log('‚úÖ Element shown by access directive');
    } else if (!hasAccess && this._isVisible) {
      // ‡∏ã‡πà‡∏≠‡∏ô element
      this.viewContainer.clear();
      this._isVisible = false;
      console.log('‚ö† Element hidden by access directive');
    }
  }

  private checkAccess(): boolean {
    if (!this.authService.isAuthenticated()) {
      console.log('üö´ User not authenticated, denying access');
      return false;
    }

    const hasPermissions = this.checkPermissions();
    const hasRoles = this.checkRoles();
    
    // ‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á permission ‡πÅ‡∏•‡∏∞ role checks
    const result = hasPermissions && hasRoles;
    
    console.log('üéØ Combined access check:', {
      hasPermissions,
      hasRoles,
      result
    });
    
    return result;
  }

  private checkPermissions(): boolean {
    if (!this._permissions.length) {
      return true; // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç permission = ‡∏ú‡πà‡∏≤‡∏ô
    }

    const userPermissions = this.authService.getEffectivePermissions();
    
    if (this._requireAllPermissions) {
      return this._permissions.every(permission => 
        userPermissions.includes(permission)
      );
    } else {
      return this._permissions.some(permission => 
        userPermissions.includes(permission)
      );
    }
  }

  private checkRoles(): boolean {
    if (!this._roles.length) {
      return true; // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç role = ‡∏ú‡πà‡∏≤‡∏ô
    }

    const userRoles = this.authService.getUserRoles();
    
    if (this._requireAllRoles) {
      return this._roles.every(role => userRoles.includes(role));
    } else {
      return this._roles.some(role => userRoles.includes(role));
    }
  }
}

// ===== ‚úÖ ENHANCED: Utility Directive ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Debug =====
@Directive({
  selector: '[debugPermissions]',
  standalone: true
})
export class DebugPermissionsDirective implements OnInit {
  private authService = inject(AuthService);

  @Input() debugPermissions: boolean = false;

  ngOnInit(): void {
    if (this.debugPermissions) {
      console.group('üîç Permission Debug from Directive');
      console.log('üîç User Permissions:', this.authService.getEffectivePermissions());
      console.log('üë• User Roles:', this.authService.getUserRoles());
      console.log('üéØ Is Authenticated:', this.authService.isAuthenticated());
      console.log('üîß Auth Methods:', {
        isAdmin: this.authService.isAdmin(),
        isSupporter: this.authService.isSupporter(),
        isUser: this.authService.isUser(),
        canManageTickets: this.authService.canManageTickets(),
        canViewAllTickets: this.authService.canViewAllTickets()
      });
      console.groupEnd();
    }
  }
}

// ===== ‚úÖ NEW: Specific Permission Directives =====

/**
 * ‚úÖ NEW: Directive ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Supporter features ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
 */
@Directive({
  selector: '[supporterOnly]',
  standalone: true
})
export class SupporterOnlyDirective implements OnInit, OnDestroy {
  private authService = inject(AuthService);
  private templateRef = inject(TemplateRef<any>);
  private viewContainer = inject(ViewContainerRef);
  private destroy$ = new Subject<void>();

  private _isVisible = false;

  ngOnInit(): void {
    console.log('üîß SupporterOnly directive initialized');
    
    this.authService.authState$
      .pipe(takeUntil(this.destroy$))
      .subscribe(() => {
        this.updateVisibility();
      });

    this.updateVisibility();
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  private updateVisibility(): void {
    // ‚úÖ ‡πÉ‡∏ä‡πâ method ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô AuthService
    const canAccess = this.authService.isSupporter() || this.authService.isAdmin();
    
    console.log('üîç Supporter access check:', {
      canAccess,
      isSupporter: this.authService.isSupporter(),
      isAdmin: this.authService.isAdmin(),
      currentVisibility: this._isVisible
    });
    
    if (canAccess && !this._isVisible) {
      this.viewContainer.createEmbeddedView(this.templateRef);
      this._isVisible = true;
      console.log('‚úÖ Supporter element shown');
    } else if (!canAccess && this._isVisible) {
      this.viewContainer.clear();
      this._isVisible = false;
      console.log('‚ö† Supporter element hidden');
    }
  }
}

/**
 * ‚úÖ NEW: Directive ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin features ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
 */
@Directive({
  selector: '[adminOnly]',
  standalone: true
})
export class AdminOnlyDirective implements OnInit, OnDestroy {
  private authService = inject(AuthService);
  private templateRef = inject(TemplateRef<any>);
  private viewContainer = inject(ViewContainerRef);
  private destroy$ = new Subject<void>();

  private _isVisible = false;

  ngOnInit(): void {
    console.log('üîß AdminOnly directive initialized');
    
    this.authService.authState$
      .pipe(takeUntil(this.destroy$))
      .subscribe(() => {
        this.updateVisibility();
      });

    this.updateVisibility();
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  private updateVisibility(): void {
    const canAccess = this.authService.isAdmin();
    
    console.log('üîç Admin access check:', {
      canAccess,
      isAdmin: this.authService.isAdmin(),
      currentVisibility: this._isVisible
    });
    
    if (canAccess && !this._isVisible) {
      this.viewContainer.createEmbeddedView(this.templateRef);
      this._isVisible = true;
      console.log('‚úÖ Admin element shown');
    } else if (!canAccess && this._isVisible) {
      this.viewContainer.clear();
      this._isVisible = false;
      console.log('‚ö† Admin element hidden');
    }
  }
}

/**
 * ‚úÖ NEW: Directive ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User features ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà admin/supporter)
 */
@Directive({
  selector: '[userOnly]',
  standalone: true
})
export class UserOnlyDirective implements OnInit, OnDestroy {
  private authService = inject(AuthService);
  private templateRef = inject(TemplateRef<any>);
  private viewContainer = inject(ViewContainerRef);
  private destroy$ = new Subject<void>();

  private _isVisible = false;

  ngOnInit(): void {
    console.log('üîß UserOnly directive initialized');
    
    this.authService.authState$
      .pipe(takeUntil(this.destroy$))
      .subscribe(() => {
        this.updateVisibility();
      });

    this.updateVisibility();
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  private updateVisibility(): void {
    // User only = ‡∏°‡∏µ USER role ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ ADMIN ‡∏´‡∏£‡∏∑‡∏≠ SUPPORTER role
    const canAccess = this.authService.isUser() && 
                     !this.authService.isAdmin() && 
                     !this.authService.isSupporter();
    
    console.log('üîç User only access check:', {
      canAccess,
      isUser: this.authService.isUser(),
      isAdmin: this.authService.isAdmin(),
      isSupporter: this.authService.isSupporter(),
      currentVisibility: this._isVisible
    });
    
    if (canAccess && !this._isVisible) {
      this.viewContainer.createEmbeddedView(this.templateRef);
      this._isVisible = true;
      console.log('‚úÖ User-only element shown');
    } else if (!canAccess && this._isVisible) {
      this.viewContainer.clear();
      this._isVisible = false;
      console.log('‚ö† User-only element hidden');
    }
  }
}

// ===== ‚úÖ NEW: Specific Feature Directives (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö 19 permissions) =====

/**
 * ‚úÖ NEW: Directive ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Project Management features
 */
@Directive({
  selector: '[canManageProject]',
  standalone: true
})
export class CanManageProjectDirective implements OnInit, OnDestroy {
  private authService = inject(AuthService);
  private templateRef = inject(TemplateRef<any>);
  private viewContainer = inject(ViewContainerRef);
  private destroy$ = new Subject<void>();

  private _isVisible = false;

  ngOnInit(): void {
    console.log('üîß CanManageProject directive initialized');
    
    this.authService.authState$
      .pipe(takeUntil(this.destroy$))
      .subscribe(() => {
        this.updateVisibility();
      });

    this.updateVisibility();
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  private updateVisibility(): void {
    const userPermissions = this.authService.getEffectivePermissions();
    const canAccess = userPermissions.includes(10); // MANAGE_PROJECT
    
    console.log('üîç Project management access check:', {
      canAccess,
      hasManageProject: userPermissions.includes(10),
      currentVisibility: this._isVisible
    });
    
    if (canAccess && !this._isVisible) {
      this.viewContainer.createEmbeddedView(this.templateRef);
      this._isVisible = true;
      console.log('‚úÖ Project management element shown');
    } else if (!canAccess && this._isVisible) {
      this.viewContainer.clear();
      this._isVisible = false;
      console.log('‚ö† Project management element hidden');
    }
  }
}

/**
 * ‚úÖ NEW: Directive ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Category/Status Management features
 */
@Directive({
  selector: '[canManageSystem]',
  standalone: true
})
export class CanManageSystemDirective implements OnInit, OnDestroy {
  private authService = inject(AuthService);
  private templateRef = inject(TemplateRef<any>);
  private viewContainer = inject(ViewContainerRef);
  private destroy$ = new Subject<void>();

  private _isVisible = false;

  ngOnInit(): void {
    console.log('üîß CanManageSystem directive initialized');
    
    this.authService.authState$
      .pipe(takeUntil(this.destroy$))
      .subscribe(() => {
        this.updateVisibility();
      });

    this.updateVisibility();
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  private updateVisibility(): void {
    const userPermissions = this.authService.getEffectivePermissions();
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ permission ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ category ‡∏´‡∏£‡∏∑‡∏≠ status
    const canAccess = userPermissions.includes(17) || userPermissions.includes(18); // MANAGE_CATEGORY || MANAGE_STATUS
    
    console.log('üîç System management access check:', {
      canAccess,
      hasManageCategory: userPermissions.includes(17),
      hasManageStatus: userPermissions.includes(18),
      currentVisibility: this._isVisible
    });
    
    if (canAccess && !this._isVisible) {
      this.viewContainer.createEmbeddedView(this.templateRef);
      this._isVisible = true;
      console.log('‚úÖ System management element shown');
    } else if (!canAccess && this._isVisible) {
      this.viewContainer.clear();
      this._isVisible = false;
      console.log('‚ö† System management element hidden');
    }
  }
}

/**
 * ‚úÖ NEW: Directive ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Dashboard/Monitoring features
 */
@Directive({
  selector: '[canViewDashboard]',
  standalone: true
})
export class CanViewDashboardDirective implements OnInit, OnDestroy {
  private authService = inject(AuthService);
  private templateRef = inject(TemplateRef<any>);
  private viewContainer = inject(ViewContainerRef);
  private destroy$ = new Subject<void>();

  private _isVisible = false;

  ngOnInit(): void {
    console.log('üîß CanViewDashboard directive initialized');
    
    this.authService.authState$
      .pipe(takeUntil(this.destroy$))
      .subscribe(() => {
        this.updateVisibility();
      });

    this.updateVisibility();
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  private updateVisibility(): void {
    const userPermissions = this.authService.getEffectivePermissions();
    const canAccess = userPermissions.includes(19); // VIEW_DASHBOARD
    
    console.log('üîç Dashboard access check:', {
      canAccess,
      hasViewDashboard: userPermissions.includes(19),
      currentVisibility: this._isVisible
    });
    
    if (canAccess && !this._isVisible) {
      this.viewContainer.createEmbeddedView(this.templateRef);
      this._isVisible = true;
      console.log('‚úÖ Dashboard element shown');
    } else if (!canAccess && this._isVisible) {
      this.viewContainer.clear();
      this._isVisible = false;
      console.log('‚ö† Dashboard element hidden');
    }
  }
}

// ===== ‚úÖ Export ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô =====
export const PERMISSION_DIRECTIVES = [
  HasPermissionDirective,
  HasRoleDirective, 
  HasAccessDirective,
  DebugPermissionsDirective,
  SupporterOnlyDirective,
  AdminOnlyDirective,
  UserOnlyDirective,
  CanManageProjectDirective,
  CanManageSystemDirective,
  CanViewDashboardDirective
] as const;