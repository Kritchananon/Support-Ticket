import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';
import { Observable, throwError, of, BehaviorSubject } from 'rxjs';
import { catchError, retry, tap, switchMap, map } from 'rxjs/operators';
import { 
  CategoryDDL, 
  CategoryStatus, 
  CategoryDDLRequest, 
  CategoryDDLResponse
} from '../models/category.model';
import { environment } from '../../../environments/environment';

// ‚úÖ PWA Cache Configuration
interface CacheEntry<T> {
  data: T;
  timestamp: number;
  expiresAt: number;
}

@Injectable({
  providedIn: 'root'
})
export class CategoryService {
  private apiUrl = environment.apiUrl;
  
  // ‚úÖ PWA Cache Management
  private readonly CACHE_KEY = 'pwa_categories_cache';
  private readonly CACHE_DURATION = 5 * 60 * 1000; // 5 minutes
  private readonly OFFLINE_CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 hours for offline
  
  // ‚úÖ Memory Cache
  private categoriesCache$ = new BehaviorSubject<CategoryDDL[]>([]);
  private cacheTimestamp = 0;

  constructor(private http: HttpClient) {
    // ‚úÖ PWA: ‡πÇ‡∏´‡∏•‡∏î cached data ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    this.loadCachedData();
  }

  // ‚úÖ Helper method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á headers ‡∏û‡∏£‡πâ‡∏≠‡∏° token
  private getAuthHeaders(): HttpHeaders {
    const token = localStorage.getItem('access_token');
    const language = localStorage.getItem('language') || 'th';
    
    return new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': token ? `Bearer ${token}` : '',
      'language': language
    });
  }

  // ‚úÖ PWA: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
  private isOnline(): boolean {
    return navigator.onLine;
  }

  // ‚úÖ PWA: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á localStorage
  private saveToCache(data: CategoryDDL[], status: CategoryStatus = 'active'): void {
    try {
      const cacheData: CacheEntry<CategoryDDL[]> = {
        data,
        timestamp: Date.now(),
        expiresAt: Date.now() + this.CACHE_DURATION
      };
      
      const cacheKey = `${this.CACHE_KEY}_${status}`;
      localStorage.setItem(cacheKey, JSON.stringify(cacheData));
      
      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï memory cache
      this.categoriesCache$.next(data);
      this.cacheTimestamp = Date.now();
      
      console.log('üì± PWA: Categories cached for status:', status, data.length);
    } catch (error) {
      console.warn('üì± PWA: Failed to cache categories:', error);
    }
  }

  // ‚úÖ PWA: ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage
  private loadFromCache(status: CategoryStatus = 'active'): CategoryDDL[] | null {
    try {
      const cacheKey = `${this.CACHE_KEY}_${status}`;
      const cached = localStorage.getItem(cacheKey);
      
      if (!cached) return null;
      
      const cacheEntry: CacheEntry<CategoryDDL[]> = JSON.parse(cached);
      const now = Date.now();
      
      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ cache ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
      const isExpired = now > cacheEntry.expiresAt;
      const isOffline = !this.isOnline();
      
      // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ cache ‡πÅ‡∏°‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß (‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
      if (isOffline && (now - cacheEntry.timestamp) < this.OFFLINE_CACHE_DURATION) {
        console.log('üì± PWA: Using offline cache for categories (expired but offline)');
        return cacheEntry.data;
      }
      
      // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
      if (!isExpired) {
        console.log('üì± PWA: Using valid cache for categories');
        return cacheEntry.data;
      }
      
      console.log('üì± PWA: Cache expired for categories');
      return null;
    } catch (error) {
      console.warn('üì± PWA: Failed to load cached categories:', error);
      return null;
    }
  }

  // ‚úÖ PWA: ‡πÇ‡∏´‡∏•‡∏î cached data ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  private loadCachedData(): void {
    const cachedData = this.loadFromCache('active');
    if (cachedData) {
      this.categoriesCache$.next(cachedData);
      this.cacheTimestamp = Date.now();
    }
  }

  // ‚úÖ PWA: ‡∏•‡πâ‡∏≤‡∏á cache
  private clearCache(): void {
    try {
      const statuses: CategoryStatus[] = ['active', 'inactive', 'all'];
      statuses.forEach(status => {
        const cacheKey = `${this.CACHE_KEY}_${status}`;
        localStorage.removeItem(cacheKey);
      });
      
      this.categoriesCache$.next([]);
      this.cacheTimestamp = 0;
      
      console.log('üì± PWA: Categories cache cleared');
    } catch (error) {
      console.warn('üì± PWA: Failed to clear categories cache:', error);
    }
  }

  // ‚úÖ MAIN API METHOD with PWA Caching
  getCategoriesDDLWithCache(request: CategoryDDLRequest = { status: 'active' }): Observable<CategoryDDLResponse> {
    const status = request.status || 'active';
    
    // ‚úÖ 1. ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ cache ‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏)
    const cachedData = this.loadFromCache(status);
    if (cachedData) {
      return of({
        code: 1,
        message: 'Data from cache',
        data: cachedData,
        success: true
      });
    }

    // ‚úÖ 2. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ cache ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
    return this.getCategoriesDDL(request).pipe(
      tap(response => {
        // ‚úÖ 3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏á cache
        if (response.code === 1 && response.data) {
          this.saveToCache(response.data, status);
        }
      }),
      catchError(error => {
        console.error('üì± PWA: API failed, trying offline cache:', error);
        
        // ‚úÖ 4. ‡∏ñ‡πâ‡∏≤ API ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ offline cache
        const offlineData = this.loadFromCache(status);
        if (offlineData) {
          return of({
            code: 1,
            message: 'Data from offline cache',
            data: offlineData,
            success: true
          });
        }
        
        // ‚úÖ 5. ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö error
        return throwError(() => error);
      })
    );
  }

  // ‚úÖ PWA: ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö cached data ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
  getCachedCategories(status: CategoryStatus = 'active'): Observable<CategoryDDL[]> {
    const cachedData = this.loadFromCache(status);
    
    if (cachedData) {
      return of(cachedData);
    }
    
    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ cache ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö empty array
    return of([]);
  }

  // ‚úÖ PWA: ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö refresh cache
  refreshCache(request: CategoryDDLRequest = { status: 'active' }): Observable<CategoryDDLResponse> {
    const status = request.status || 'active';
    
    // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á cache ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ status ‡∏ô‡∏µ‡πâ
    const cacheKey = `${this.CACHE_KEY}_${status}`;
    localStorage.removeItem(cacheKey);
    
    // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÉ‡∏´‡∏°‡πà
    return this.getCategoriesDDL(request).pipe(
      tap(response => {
        if (response.code === 1 && response.data) {
          this.saveToCache(response.data, status);
        }
      })
    );
  }

  // ‚úÖ PWA: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ cache ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  hasCachedData(status: CategoryStatus = 'active'): boolean {
    const cachedData = this.loadFromCache(status);
    return cachedData !== null && cachedData.length > 0;
  }

  // ‚úÖ PWA: ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á cache
  getCacheAge(status: CategoryStatus = 'active'): number {
    try {
      const cacheKey = `${this.CACHE_KEY}_${status}`;
      const cached = localStorage.getItem(cacheKey);
      
      if (!cached) return 0;
      
      const cacheEntry: CacheEntry<CategoryDDL[]> = JSON.parse(cached);
      return Date.now() - cacheEntry.timestamp;
    } catch {
      return 0;
    }
  }

  // ‚úÖ ORIGINAL API METHOD (‡πÄ‡∏î‡∏¥‡∏°)
  getCategoriesDDL(request: CategoryDDLRequest = { status: 'active' }): Observable<CategoryDDLResponse> {
    return this.http.post<CategoryDDLResponse>(`${this.apiUrl}/getCategoriesDDL`, request, {
      headers: this.getAuthHeaders()
    }).pipe(
      retry(2), // ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
      catchError(this.handleError)
    );
  }

  // ‚úÖ Convenience Methods
  getAllCategoriesWithCache(): Observable<CategoryDDLResponse> {
    return this.getCategoriesDDLWithCache({ status: 'all' });
  }

  getActiveCategoriesWithCache(): Observable<CategoryDDLResponse> {
    return this.getCategoriesDDLWithCache({ status: 'active' });
  }

  getInactiveCategoriesWithCache(): Observable<CategoryDDLResponse> {
    return this.getCategoriesDDLWithCache({ status: 'inactive' });
  }

  // ‚úÖ ORIGINAL Methods (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backward compatibility)
  getAllCategories(): Observable<CategoryDDLResponse> {
    return this.getCategoriesDDL({ status: 'all' });
  }

  getActiveCategories(): Observable<CategoryDDLResponse> {
    return this.getCategoriesDDL({ status: 'active' });
  }

  getInactiveCategories(): Observable<CategoryDDLResponse> {
    return this.getCategoriesDDL({ status: 'inactive' });
  }

  // ‚úÖ PWA Utility Methods
  
  /**
   * ‚úÖ PWA: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ cache
   */
  getCacheStatus(status: CategoryStatus = 'active'): {
    hasCache: boolean;
    isExpired: boolean;
    ageInMinutes: number;
    dataCount: number;
  } {
    const hasCache = this.hasCachedData(status);
    const ageMs = this.getCacheAge(status);
    const ageInMinutes = Math.floor(ageMs / (1000 * 60));
    const isExpired = ageMs > this.CACHE_DURATION;
    
    let dataCount = 0;
    if (hasCache) {
      const cachedData = this.loadFromCache(status);
      dataCount = cachedData?.length || 0;
    }
    
    return {
      hasCache,
      isExpired,
      ageInMinutes,
      dataCount
    };
  }

  /**
   * ‚úÖ PWA: ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ cache
   */
  getCacheStats(): {
    totalCacheSize: number;
    cacheKeys: string[];
    oldestCache: number;
    newestCache: number;
  } {
    const statuses: CategoryStatus[] = ['active', 'inactive', 'all'];
    const cacheKeys: string[] = [];
    let totalSize = 0;
    let oldestCache = Date.now();
    let newestCache = 0;
    
    statuses.forEach(status => {
      const cacheKey = `${this.CACHE_KEY}_${status}`;
      const cached = localStorage.getItem(cacheKey);
      
      if (cached) {
        cacheKeys.push(cacheKey);
        totalSize += cached.length;
        
        try {
          const cacheEntry: CacheEntry<CategoryDDL[]> = JSON.parse(cached);
          oldestCache = Math.min(oldestCache, cacheEntry.timestamp);
          newestCache = Math.max(newestCache, cacheEntry.timestamp);
        } catch {
          // Ignore invalid cache entries
        }
      }
    });
    
    return {
      totalCacheSize: totalSize,
      cacheKeys,
      oldestCache: oldestCache === Date.now() ? 0 : oldestCache,
      newestCache
    };
  }

  /**
   * ‚úÖ PWA: ‡∏•‡πâ‡∏≤‡∏á cache ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  clearAllCache(): void {
    this.clearCache();
  }

  // ‚úÖ Error Handling
  private handleError(error: HttpErrorResponse) {
    let errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏';
    
    if (error.error instanceof ErrorEvent) {
      // Client-side error
      errorMessage = `Client Error: ${error.error.message}`;
    } else {
      // Server-side error
      switch (error.status) {
        case 0:
          errorMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï)';
          break;
        case 401:
          errorMessage = '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà';
          break;
        case 403:
          errorMessage = '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ';
          break;
        case 404:
          errorMessage = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£';
          break;
        case 500:
          errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå';
          break;
        case 503:
          errorMessage = '‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£';
          break;
        default:
          errorMessage = error.error?.message || `‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ${error.status}`;
      }
    }
    
    console.error('CategoryService Error:', {
      status: error.status,
      message: errorMessage,
      error: error.error,
      url: error.url
    });
    
    return throwError(() => errorMessage);
  }
}