// src/app/shared/services/dashboard.service.ts

import { Injectable, inject } from '@angular/core';
import { Observable, catchError, of, throwError } from 'rxjs';
import { ApiService } from './api.service';
import { ApiResponse, DashboardStatsResponse, CategoryStatsDTO } from '../models/common.model';

@Injectable({
  providedIn: 'root'
})
export class DashboardService {
  private apiService = inject(ApiService);

  constructor() { }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Dashboard Stats ‡∏à‡∏≤‡∏Å Backend API
   * ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å GET /dashboard
   */
  getDashboardStats(): Observable<ApiResponse<DashboardStatsResponse>> {
    console.log('üöÄ Fetching dashboard stats...');

    return this.apiService.get<DashboardStatsResponse>('dashboard').pipe(
      catchError(error => {
        console.error('‚ùå Error fetching dashboard stats:', error);
        return throwError(() => error);
      })
    );
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Category Breakdown ‡∏à‡∏≤‡∏Å Backend API
   * ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å GET /summaryCategories
   */
  getCategoryBreakdown(
    year?: number,
    month?: number, 
    userId?: number
  ): Observable<ApiResponse<CategoryStatsDTO[]>> {
    console.log('üöÄ Fetching category breakdown...', { year, month, userId });
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á query parameters
    const params: any = {};
    if (year) params.year = year.toString();
    if (month) params.month = month.toString();
    if (userId) params.userId = userId.toString();

    return this.apiService.get<CategoryStatsDTO[]>('summaryCategories', params).pipe(
      catchError(error => {
        console.error('‚ùå Error fetching category breakdown:', error);
        
        // Return mock data ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        return of({
          code: '2',
          status: 1,
          message: 'Using mock data due to API error',
          data: [
            {
              category: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ',
              count: 84,
              percentage: 35,
              color: '#1FBCD5'
            },
            {
              category: '‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πà‡∏°/‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ',
              count: 72,
              percentage: 30,
              color: '#DC3545'
            },
            {
              category: '‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏à‡∏≠‡∏ö‡∏±‡∏Ñ',
              count: 60,
              percentage: 25,
              color: '#5873F8'
            },
            {
              category: '‡∏≠‡∏∑‡πà‡∏ô‡πÜ',
              count: 24,
              percentage: 10,
              color: '#6C757D'
            }
          ]
        });
      })
    );
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Monthly Ticket Stats
   * ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å getDashboardStats() ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á trend data
   */
  getMonthlyTicketStats(year: number, month: number): Observable<any> {
    console.log('üöÄ Generating monthly ticket stats...', { year, month });
    
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ mock data ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞ realistic
    // ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏≠‡∏≤‡∏à‡πÄ‡∏û‡∏¥‡πà‡∏° API endpoint ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö monthly data
    
    const daysInMonth = new Date(year, month, 0).getDate();
    const mockData = {
      labels: Array.from({ length: daysInMonth }, (_, i) => i + 1),
      newTickets: this.generateRealisticData(daysInMonth, 15, 65),
      completeTickets: this.generateRealisticData(daysInMonth, 10, 60)
    };

    return of({
      code: '2',
      status: 1,
      message: 'Monthly stats generated successfully',
      data: mockData
    });
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• mock ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞ realistic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö chart
   */
  private generateRealisticData(length: number, min: number, max: number): number[] {
    const data = [];
    let previousValue = Math.floor((min + max) / 2);

    for (let i = 0; i < length; i++) {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà natural ‡πÇ‡∏î‡∏¢‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
      const variation = (Math.random() - 0.5) * 20;
      const newValue = Math.max(min, Math.min(max, previousValue + variation));
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
      const midMonthBoost = i > length * 0.3 && i < length * 0.7 ? 5 : 0;
      
      data.push(Math.round(newValue + midMonthBoost));
      previousValue = newValue;
    }

    return data;
  }
}